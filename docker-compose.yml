# Docker Compose for Microservices Architecture
# Admin Backend + Vendor Backend + Shared Database + API Gateway

version: '3.8'

services:
  # API Gateway (Optional - Routes requests to appropriate backend)
  api-gateway:
    build: 
      context: .
      dockerfile: packages/api-gateway/Dockerfile
    container_name: saas-api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - ADMIN_BACKEND_URL=http://admin-backend:3001
      - VENDOR_BACKEND_URL=http://vendor-backend:3002
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000
    depends_on:
      - admin-backend
      - vendor-backend
    networks:
      - saas-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Backend Service
  admin-backend:
    build:
      context: .
      dockerfile: packages/admin-backend/Dockerfile
    container_name: saas-admin-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - ADMIN_PORT=3001
      - DATABASE_TYPE=postgresql
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=saas_platform
      - DATABASE_USER=saas_user
      - DATABASE_PASSWORD=saas_password_2024
      - DATABASE_SSL=false
      - DATABASE_POOL_SIZE=20
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=admin_jwt_secret_key_2024
      - ADMIN_FRONTEND_URL=http://localhost:3000
      # API Keys (encrypted in production)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - GROK_API_KEY=${GROK_API_KEY}
      - TWILIO_SID=${TWILIO_SID}
      - TWILIO_TOKEN=${TWILIO_TOKEN}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - SERPAPI_KEY=${SERPAPI_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - saas-network
    restart: unless-stopped
    volumes:
      - admin-logs:/app/logs
      - admin-uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vendor Backend Service
  vendor-backend:
    build:
      context: .
      dockerfile: packages/vendor-backend/Dockerfile
    container_name: saas-vendor-backend
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - VENDOR_PORT=3002
      - DATABASE_TYPE=postgresql
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=saas_platform
      - DATABASE_USER=saas_user
      - DATABASE_PASSWORD=saas_password_2024
      - DATABASE_SSL=false
      - DATABASE_POOL_SIZE=15
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=vendor_jwt_secret_key_2024
      - VENDOR_APP_URL=http://localhost:3003
      # Push Notification Services
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      # WhatsApp Business API
      - WHATSAPP_BUSINESS_TOKEN=${WHATSAPP_BUSINESS_TOKEN}
      - WHATSAPP_PHONE_NUMBER_ID=${WHATSAPP_PHONE_NUMBER_ID}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - saas-network
    restart: unless-stopped
    volumes:
      - vendor-logs:/app/logs
      - vendor-uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (Shared)
  postgres:
    image: postgres:15-alpine
    container_name: saas-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=saas_platform
      - POSTGRES_USER=saas_user
      - POSTGRES_PASSWORD=saas_password_2024
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/shared/database/migrations:/docker-entrypoint-initdb.d
    networks:
      - saas-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saas_user -d saas_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB

  # Redis Cache (Shared)
  redis:
    image: redis:7-alpine
    container_name: saas-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - saas-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    container_name: saas-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-gateway
      - admin-backend
      - vendor-backend
    networks:
      - saas-network
    restart: unless-stopped

# Named Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  admin-logs:
    driver: local
  admin-uploads:
    driver: local
  vendor-logs:
    driver: local
  vendor-uploads:
    driver: local

# Networks
networks:
  saas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
